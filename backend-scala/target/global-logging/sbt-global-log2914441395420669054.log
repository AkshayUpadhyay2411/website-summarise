[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\hp\AppData\Local\Temp\idea5.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\hp\AppData\Local\Temp\idea5.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.0 (Amazon.com Inc. Java 1.8.0_382)
[debug]       Load.loadUnit: plugins took 182.9763ms
[debug]       Load.loadUnit: defsScala took 0.5984ms
[debug] [Loading] Scanning directory C:\Users\hp\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 39.614 ms
[debug]           Load.resolveProject(global-plugins) took 107.668ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\hp\.sbt\1.0\plugins, plugins: List(<none>))) took 194.6223ms
[debug] [Loading] Done in C:\Users\hp\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 270.2084ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.6356ms
[debug]     Load.loadUnit(file:/C:/Users/hp/.sbt/1.0/plugins/, ...) took 476.4862ms
[debug]   Load.apply: load took 1060.0049ms
[debug]   Load.apply: resolveProjects took 17.8676ms
[debug]   Load.apply: finalTransforms took 180.233ms
[debug]   Load.apply: config.delegates took 23.9432ms
[debug]   Load.apply: Def.make(settings)... took 1153.1033ms
[debug]   Load.apply: structureIndex took 262.6382ms
[debug]   Load.apply: mkStreams took 4.4833ms
[info] loading global plugins from C:\Users\hp\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5991.1008ms
[debug]           Load.loadUnit: plugins took 153.2997ms
[debug]           Load.loadUnit: defsScala took 0.0118ms
[debug] [Loading] Scanning directory C:\Users\hp\Desktop\Website-Summarisation\backend-scala\project
[debug]             Load.loadUnit: mkEval took 32.7578ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\Desktop\Website-Summarisation\backend-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.9501 ms
[info] loading settings for project backend-scala-build from plugins.sbt,idea5.sbt ...
[debug]               Load.resolveProject(backend-scala-build) took 8.2156ms
[debug]             Load.loadTransitive: finalizeProject(Project(id backend-scala-build, base: C:\Users\hp\Desktop\Website-Summarisation\backend-scala\project, plugins: List(<none>))) took 15.5945ms
[debug] [Loading] Done in C:\Users\hp\Desktop\Website-Summarisation\backend-scala\project, returning: (backend-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 834.3177ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.7829ms
[debug]         Load.loadUnit(file:/C:/Users/hp/Desktop/Website-Summarisation/backend-scala/project/, ...) took 1002.7979ms
[debug]       Load.apply: load took 1006.4013ms
[debug]       Load.apply: resolveProjects took 0.264ms
[debug]       Load.apply: finalTransforms took 18.3061ms
[debug]       Load.apply: config.delegates took 0.8952ms
[debug]       Load.apply: Def.make(settings)... took 261.1047ms
[debug]       Load.apply: structureIndex took 70.6521ms
[debug]       Load.apply: mkStreams took 0.004ms
[info] loading project definition from C:\Users\hp\Desktop\Website-Summarisation\backend-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 2154.9544ms
[debug]     Load.loadUnit: defsScala took 0.0129ms
[debug] [Loading] Scanning directory C:\Users\hp\Desktop\Website-Summarisation\backend-scala
[debug]       Load.loadUnit: mkEval took 0.5775ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\hp\Desktop\Website-Summarisation\backend-scala, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbtide.ConfigPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.7515 ms
[info] loading settings for project backend-scala from build.sbt ...
[debug]         Load.resolveProject(backend-scala) took 73.5501ms
[debug]       Load.loadTransitive: finalizeProject(Project(id backend-scala, base: C:\Users\hp\Desktop\Website-Summarisation\backend-scala, plugins: List(<none>))) took 81.6548ms
[debug] [Loading] Done in C:\Users\hp\Desktop\Website-Summarisation\backend-scala, returning: (backend-scala)
[debug]     Load.loadUnit: loadedProjectsRaw took 304.1678ms
[debug]     Load.loadUnit: cleanEvalClasses took 12.3641ms
[debug]   Load.loadUnit(file:/C:/Users/hp/Desktop/Website-Summarisation/backend-scala/, ...) took 2472.8831ms
[debug] Load.apply: load took 2478.3213ms
[debug] Load.apply: resolveProjects took 0.245ms
[debug] Load.apply: finalTransforms took 60.5569ms
[debug] Load.apply: config.delegates took 1.6311ms
[debug] Load.apply: Def.make(settings)... took 138.1605ms
[debug] Load.apply: structureIndex took 39.1984ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to backend-scala (in build file:/C:/Users/hp/Desktop/Website-Summarisation/backend-scala/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * backend-scala / idePackagePrefix
[warn]   +- C:\Users\hp\Desktop\Website-Summarisation\backend-scala\build.sbt:4
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 60271 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 60271, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to backend-scala (in build file:/C:/Users/hp/Desktop/Website-Summarisation/backend-scala/)
[debug] > Exec(idea-shell, None, None)
